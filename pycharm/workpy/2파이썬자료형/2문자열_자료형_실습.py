# 문자열은 어떻게 만들고 사용할까?
# 1> [문자열을 만드는 방법]
#   1. 큰 따옴표("")로 양쪽 둘러 싸기
# - ex) "Hello World"

#   2. 작은 따옴표('')로 양쪽 둘러 싸기
# - ex) 'Hello World'

#   3. 큰 따옴표 """ 3개를 연속적으로 써서 양쪽 둘러 싸기
# - ex) """Hello"""

#   4. 작은 따옴표 ''' 3개를 연속적으로 써서 양쪽 둘러 싸기
# - ex) '''Hello'''


# 2> 문자열 안에 작은 따옴표나 큰 따옴표를 기호로 포함시키고 싶을 때
#   1. 문자열에 작은 따옴표 ' 포함시키기
# - ex)
food = "Python's good" # Python's에 작은 따옴표 '를 포함시키려면 큰 따옴표로 둘러싸야한다.
print(food)

#   2. 문자열에 큰 따옴표 " 포함시키기
# - ex)
say = '"Pythons" good' # 문자열 내부에 큰 따옴표를 기호로 표현하고 싶을 때, 문자열 전체의 양쪽을 ? 혹은
print(say)             # 작은따옴표 '로 감싼다.

#   3. 작은 따옴표 ' 또는 큰 따옴표 " 를 문자열에 포함시키는 또다른 방법은 백슬래시 \를 사용한다.
#   즉, 백슬러기 기호 \를 작은 따옴표 ' 또는 큰 따옴표 " 앞에 삽입하면 백슬러시 \ 뒤에 작은 따옴표 ' 나
#   큰 따옴표 " 는 문자열을 둘러싸는 기호의 의미가 아닌 문자로 인식한다.
food = 'has\'s'
print(food) # 출력값 has's

say = "has\"s"
print(say) # 출력값 has"s


# 3> 여러 줄인 문자열을 변수에 대입하는 방법
#   1. 문자열의 줄을 바꾸는 이스케이프 코드 \n 삽입하기
# - ex)
multiline = "Life is too short \nYou need Python"
print(multiline)

#   2. 연속된 작은 따옴표 ''' 3개를 큰 따옴표 """ 3개 사용하기
# - 작은 따옴표 ''' 3개를 사용할 경우
# - ex)
multiline = '''
안녕하세요.
반갑습니다.
'''
print(multiline)

# - 큰 따옴표 """ 3개를 사용한 경우
# - ex)
multiline = """
안녕하세요.
어서오세요.
"""
print(multiline)

# -------------------------------------------------------------------------------------------

# [문자열 연산하기]
# 1> 문자열 더해서 연결하기
head = "Python"
tail = " is fun!"
print(head + tail)

# 2> 문자열 곱하기
a = "python"
print(a * 2) # 출력값 pythonpython
# --> a변수에 저장된 문자열을 두번 반복해서 연결하라는 의미이다.

# 3> 문자열 곱하기 응용
print("=" * 50)
print("My Program")
print("=" * 50)

# 4> 문자열 길이 구하기
# 문자열 길이 구하기 -> len()를 사용하면 구할 수 있다.(자바에서 length()와 동일)
a = "Life is too short"
b = len(a)
print(b) # 출력값 17

# -------------------------------------------------------------------------------------------

# 문자열 인덱싱(한문자만 가리켜서 얻는다)과 슬라이싱(단어를 잘라낸다)
# 1> 문자열 인덱싱(한문자만 가리켜 얻는) 예제 - 인덱스 위치 접근은 대괄호 [] 로 접근한다.
# - 앞에서부터 찾을때
a = "Hello is"
#    01234567 --> 전체 문자열 중 문자의 위치를 가리키는 번호로 0인덱스 위치부터 센다.
print(a[1]) # 출력값 e
# --> 1 위치의 문자 e를 얻어 출력
print(a[4]) # 출력값 o
# --> 4 위치의 문자 o를 얻어 출력

# - 뒤에서부터 찾을때
b = "Hello is"
#         -2-1 --> 전체 문자열 중 뒤에서부터 문자의 위치를 가리킬 때 -1부터 센다.
print(b[-1]) # 출력값 s
print(b[-2]) # 출력값 i

# 2> 문자열 슬라이싱(단어를 잘라낸다) 예제
# - 1. 슬라이싱 기본 문법
# a[시작번호:끝번호]   -> a변수에 저장된 문자열 중 시작번호 위치부터 끝번호 위치 이전까지 단어를 잘라내어 뽑아낸다.
a = "Hello is"
#    01234567
b = a[0:4]
print(b) # 출력값 Hell
c = a[3:6]
print(c) # 출력값 lo

# - 2. 슬라이싱 기본 문법
# a[시작번호:생략]    -> a변수에 저장된 문자열 중 시작번호부터 끝까지 잘라내어 뽑아낸다.
a = "Hello is"
#    01234567
b = a[0:]
print(b) # 출력값 Hello is

# - 3. 슬라이싱 기본 문법
# a[생략:끝번호]     -> a변수에 저장된 문자열 중 시작번호를 생략 시 문자열의 처음부터 끝번호 위치 이전까지 잘라내어 뽑아낸다.
a = "Hello is"
#    01234567
b = a[:7]
print(b) # 출력값 Hello i

# - 4. 슬라이싱 기본 문법
# a[생략:생략]       -> a변수에 저장된 문자열 중 시작번호, 끝번호 모두 생략 시 문자열 값 모두를 잘라내어 뽑아낸다.
a = "Hello is"
#    01234567
b = a[:]
print(b) # 출력값 Hello is

# - 5. 슬라이싱 기법으로 문자열 나누기 응용 예제
a = "20010331Rainy"
#    0123456789...

year = a[:4] # 처음부터 a[3]까지의 문자열 '2001'을 잘라내어 변수에 저장한다.
print(year)
day = a[4:8]
print(day)
weather = a[8:]
print(weather)

# -------------------------------------------------------------------------------------------

# 문자열 포매팅이란?
# - 문자열 안에 어떤 값을 삽입하는 방법

# 1> 문자열 포매팅 따라하기
#   1. 숫자 바로 대입
print("I eat %d apples." % 3) # %d자리에 숫자3을 대입한 전체 문자열 I eat 3 apples.가 출력된다.

#   2. 문자열 바로 대입
print("I eat %s apples." %"five") # %s자리에 문자열 "five"를 대입한다.
# --------------> 숫자를 넣기 위해서는 %d를 사용하고, 문자열은 %s를 사용한다.

#   3. 숫자 값을 나타내는 변수로 대입
number = 3
print("I eat %d apples." % number) # 출력값 I eat 3 apples.

#   4. 문자열 2개 이상의 값을 대입
number = 1
day = "Hello"
# Hello라고 1번 인사하기 출력해보자
print("%s라고 %d번 인사하기" % (day, number)) # 출력값 Hello라고 1번 인사하기

# --------------> 결론 : 2개 이상의 값을 넣으려면 마지막 % 다음 괄호 안에 ,로 구분하여 각각의 값을 넣어주면 된다.

# 2> 문자열 포맷코드의 종료
# - %s : 문자열
# - %c : 문자1개
# - %d : 정수
# - %f : 부동소수
# - %o : 8진수
# - %x : 16진수
# - %% : (문자 '%' 자체)

# ex)
# -- I have 3 apples 출력
# print("I have %d apples" % 3)
print("I have %s apples" % 3)
# -- rate is 3.234 출력
# print("rate is %f" % 3.234)
print("rate is %s" % 3.234)

# --------------> 정수값을 문자열에 삽입하려면 %d를 사용하고, 실수값을 문자열에 삽입하려면 %f를 사용해야한다.
#                 하지만, %s를 사용하면 이런 것은 생각하지 않아도 된다.
#                 왜냐하면 %s는 자동으로 %뒤에 있는 값을 문자열로 자동으로 형변환 시켜서 대입해주기 때문이다.

# ex)
# 포매팅 연산자 %d와 %를 같이 사용할 때는 %%를 사용한다.
# -- Error is 98% 출력
print("Error is %d%%" % 98)

# 3> 포맷 코드와 숫자 함께 사용하기
#   1. 정렬과 공백
# - ex) %10s는 전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 정렬하고, 그 앞의 나머지는 공백으로 남겨둔다.
print("%10s" % "h1") # 출력값         h1
print("%-10s" % "h1") # 출력값 h1        /여기까지

# - ex) 'h1'을 전체 문자열에 삽입할 때 왼쪽 정렬시키고 나머지는 빈공백으로 남겨두기
print("%-10sjane" % 'h1') # 출력값 h1        jane


